

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace PrivateLabelLite.Data.DataEntities
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class PrivateLabelLiteDataEntities : DbContext
{
    public PrivateLabelLiteDataEntities()
        : base("name=PrivateLabelLiteDataEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Company> Company { get; set; }

    public virtual DbSet<Configs> Configs { get; set; }

    public virtual DbSet<Enduser> Enduser { get; set; }

    public virtual DbSet<CompanyOrder> CompanyOrder { get; set; }

    public virtual DbSet<SiteContent> SiteContent { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<OrderHeader> OrderHeader { get; set; }

    public virtual DbSet<SubscriptionSummaryDetail> SubscriptionSummaryDetail { get; set; }

    public virtual DbSet<OrderLine> OrderLine { get; set; }


    public virtual ObjectResult<procGetUsers_Result> procGetUsers(Nullable<decimal> id, string userName, string companyName, Nullable<int> rowCount, Nullable<int> pageNo, string orderBy, Nullable<decimal> companyId)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(decimal));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var rowCountParameter = rowCount.HasValue ?
            new ObjectParameter("rowCount", rowCount) :
            new ObjectParameter("rowCount", typeof(int));


        var pageNoParameter = pageNo.HasValue ?
            new ObjectParameter("pageNo", pageNo) :
            new ObjectParameter("pageNo", typeof(int));


        var orderByParameter = orderBy != null ?
            new ObjectParameter("orderBy", orderBy) :
            new ObjectParameter("orderBy", typeof(string));


        var companyIdParameter = companyId.HasValue ?
            new ObjectParameter("CompanyId", companyId) :
            new ObjectParameter("CompanyId", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procGetUsers_Result>("procGetUsers", idParameter, userNameParameter, companyNameParameter, rowCountParameter, pageNoParameter, orderByParameter, companyIdParameter);
    }


    public virtual ObjectResult<procGetCompanySalesOrders_Result> procGetCompanySalesOrders(Nullable<decimal> companyId, string endUser, string salesOrderNo, Nullable<int> rowCount, Nullable<int> pageno)
    {

        var companyIdParameter = companyId.HasValue ?
            new ObjectParameter("CompanyId", companyId) :
            new ObjectParameter("CompanyId", typeof(decimal));


        var endUserParameter = endUser != null ?
            new ObjectParameter("EndUser", endUser) :
            new ObjectParameter("EndUser", typeof(string));


        var salesOrderNoParameter = salesOrderNo != null ?
            new ObjectParameter("SalesOrderNo", salesOrderNo) :
            new ObjectParameter("SalesOrderNo", typeof(string));


        var rowCountParameter = rowCount.HasValue ?
            new ObjectParameter("rowCount", rowCount) :
            new ObjectParameter("rowCount", typeof(int));


        var pagenoParameter = pageno.HasValue ?
            new ObjectParameter("Pageno", pageno) :
            new ObjectParameter("Pageno", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procGetCompanySalesOrders_Result>("procGetCompanySalesOrders", companyIdParameter, endUserParameter, salesOrderNoParameter, rowCountParameter, pagenoParameter);
    }


    public virtual ObjectResult<procXmlGetOrders_Result> procXmlGetOrders(Nullable<bool> isAdmin, string userEmailId, string orderNumber, string userName, string skuName, Nullable<int> rowCount, Nullable<int> pageno, string companyName)
    {

        var isAdminParameter = isAdmin.HasValue ?
            new ObjectParameter("IsAdmin", isAdmin) :
            new ObjectParameter("IsAdmin", typeof(bool));


        var userEmailIdParameter = userEmailId != null ?
            new ObjectParameter("UserEmailId", userEmailId) :
            new ObjectParameter("UserEmailId", typeof(string));


        var orderNumberParameter = orderNumber != null ?
            new ObjectParameter("OrderNumber", orderNumber) :
            new ObjectParameter("OrderNumber", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var skuNameParameter = skuName != null ?
            new ObjectParameter("SkuName", skuName) :
            new ObjectParameter("SkuName", typeof(string));


        var rowCountParameter = rowCount.HasValue ?
            new ObjectParameter("rowCount", rowCount) :
            new ObjectParameter("rowCount", typeof(int));


        var pagenoParameter = pageno.HasValue ?
            new ObjectParameter("Pageno", pageno) :
            new ObjectParameter("Pageno", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procXmlGetOrders_Result>("procXmlGetOrders", isAdminParameter, userEmailIdParameter, orderNumberParameter, userNameParameter, skuNameParameter, rowCountParameter, pagenoParameter, companyNameParameter);
    }


    public virtual int procXmlUpsertProducts(string products)
    {

        var productsParameter = products != null ?
            new ObjectParameter("Products", products) :
            new ObjectParameter("Products", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procXmlUpsertProducts", productsParameter);
    }


    public virtual int procXmlInsertCompanies(string companies, string createdBy)
    {

        var companiesParameter = companies != null ?
            new ObjectParameter("Companies", companies) :
            new ObjectParameter("Companies", typeof(string));


        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procXmlInsertCompanies", companiesParameter, createdByParameter);
    }


    public virtual int procXmlRemoveEndUser(string customerIds)
    {

        var customerIdsParameter = customerIds != null ?
            new ObjectParameter("customerIds", customerIds) :
            new ObjectParameter("customerIds", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procXmlRemoveEndUser", customerIdsParameter);
    }


    public virtual int procXmlDeleteCompanyOrderMapping(string recordIds)
    {

        var recordIdsParameter = recordIds != null ?
            new ObjectParameter("recordIds", recordIds) :
            new ObjectParameter("recordIds", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procXmlDeleteCompanyOrderMapping", recordIdsParameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual ObjectResult<procGetUserSubscriptions_Result> procGetUserSubscriptions(Nullable<int> pageSize, Nullable<int> pageNum, string endUserEmail, string endUserName, string productName)
    {

        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var pageNumParameter = pageNum.HasValue ?
            new ObjectParameter("PageNum", pageNum) :
            new ObjectParameter("PageNum", typeof(int));


        var endUserEmailParameter = endUserEmail != null ?
            new ObjectParameter("EndUserEmail", endUserEmail) :
            new ObjectParameter("EndUserEmail", typeof(string));


        var endUserNameParameter = endUserName != null ?
            new ObjectParameter("EndUserName", endUserName) :
            new ObjectParameter("EndUserName", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procGetUserSubscriptions_Result>("procGetUserSubscriptions", pageSizeParameter, pageNumParameter, endUserEmailParameter, endUserNameParameter, productNameParameter);
    }


    public virtual int procInsertIntoLogs(string message, string errorCode, string result, Nullable<int> key, Nullable<bool> isSuccess, Nullable<bool> isValid, Nullable<System.DateTime> timeStamp, string browser, string currentExecutionFilePath, string requestType, string userHostAddress, string userHostName)
    {

        var messageParameter = message != null ?
            new ObjectParameter("message", message) :
            new ObjectParameter("message", typeof(string));


        var errorCodeParameter = errorCode != null ?
            new ObjectParameter("ErrorCode", errorCode) :
            new ObjectParameter("ErrorCode", typeof(string));


        var resultParameter = result != null ?
            new ObjectParameter("Result", result) :
            new ObjectParameter("Result", typeof(string));


        var keyParameter = key.HasValue ?
            new ObjectParameter("Key", key) :
            new ObjectParameter("Key", typeof(int));


        var isSuccessParameter = isSuccess.HasValue ?
            new ObjectParameter("IsSuccess", isSuccess) :
            new ObjectParameter("IsSuccess", typeof(bool));


        var isValidParameter = isValid.HasValue ?
            new ObjectParameter("IsValid", isValid) :
            new ObjectParameter("IsValid", typeof(bool));


        var timeStampParameter = timeStamp.HasValue ?
            new ObjectParameter("TimeStamp", timeStamp) :
            new ObjectParameter("TimeStamp", typeof(System.DateTime));


        var browserParameter = browser != null ?
            new ObjectParameter("Browser", browser) :
            new ObjectParameter("Browser", typeof(string));


        var currentExecutionFilePathParameter = currentExecutionFilePath != null ?
            new ObjectParameter("CurrentExecutionFilePath", currentExecutionFilePath) :
            new ObjectParameter("CurrentExecutionFilePath", typeof(string));


        var requestTypeParameter = requestType != null ?
            new ObjectParameter("RequestType", requestType) :
            new ObjectParameter("RequestType", typeof(string));


        var userHostAddressParameter = userHostAddress != null ?
            new ObjectParameter("UserHostAddress", userHostAddress) :
            new ObjectParameter("UserHostAddress", typeof(string));


        var userHostNameParameter = userHostName != null ?
            new ObjectParameter("UserHostName", userHostName) :
            new ObjectParameter("UserHostName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procInsertIntoLogs", messageParameter, errorCodeParameter, resultParameter, keyParameter, isSuccessParameter, isValidParameter, timeStampParameter, browserParameter, currentExecutionFilePathParameter, requestTypeParameter, userHostAddressParameter, userHostNameParameter);
    }


    public virtual ObjectResult<procGetSubscriptionSummary_Result> procGetSubscriptionSummary(Nullable<int> pageSize, Nullable<int> pageNum, string companyName, string domain, string productName, string resellerPO, string orderNumber, Nullable<bool> editProductStatus)
    {

        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var pageNumParameter = pageNum.HasValue ?
            new ObjectParameter("PageNum", pageNum) :
            new ObjectParameter("PageNum", typeof(int));


        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));


        var domainParameter = domain != null ?
            new ObjectParameter("Domain", domain) :
            new ObjectParameter("Domain", typeof(string));


        var productNameParameter = productName != null ?
            new ObjectParameter("ProductName", productName) :
            new ObjectParameter("ProductName", typeof(string));


        var resellerPOParameter = resellerPO != null ?
            new ObjectParameter("ResellerPO", resellerPO) :
            new ObjectParameter("ResellerPO", typeof(string));


        var orderNumberParameter = orderNumber != null ?
            new ObjectParameter("OrderNumber", orderNumber) :
            new ObjectParameter("OrderNumber", typeof(string));


        var editProductStatusParameter = editProductStatus.HasValue ?
            new ObjectParameter("EditProductStatus", editProductStatus) :
            new ObjectParameter("EditProductStatus", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procGetSubscriptionSummary_Result>("procGetSubscriptionSummary", pageSizeParameter, pageNumParameter, companyNameParameter, domainParameter, productNameParameter, resellerPOParameter, orderNumberParameter, editProductStatusParameter);
    }


    public virtual ObjectResult<Nullable<bool>> procIsUserAuthorizeToIncreaseSeat(string quantity, string sKU, Nullable<int> seatCounter, string orderNumber, Nullable<int> originalQuantity)
    {

        var quantityParameter = quantity != null ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(string));


        var sKUParameter = sKU != null ?
            new ObjectParameter("SKU", sKU) :
            new ObjectParameter("SKU", typeof(string));


        var seatCounterParameter = seatCounter.HasValue ?
            new ObjectParameter("SeatCounter", seatCounter) :
            new ObjectParameter("SeatCounter", typeof(int));


        var orderNumberParameter = orderNumber != null ?
            new ObjectParameter("OrderNumber", orderNumber) :
            new ObjectParameter("OrderNumber", typeof(string));


        var originalQuantityParameter = originalQuantity.HasValue ?
            new ObjectParameter("OriginalQuantity", originalQuantity) :
            new ObjectParameter("OriginalQuantity", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("procIsUserAuthorizeToIncreaseSeat", quantityParameter, sKUParameter, seatCounterParameter, orderNumberParameter, originalQuantityParameter);
    }

}

}

